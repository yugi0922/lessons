<svg width="800" height="500" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="kotlinFlow" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#7F52FF;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#C711E1;stop-opacity:1" />
    </linearGradient>
    <linearGradient id="javaFlow" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#5382A1;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#F89820;stop-opacity:1" />
    </linearGradient>
  </defs>

  <!-- Title -->
  <text x="400" y="30" font-family="Arial, sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="#333">
    制御構文の進化
  </text>

  <!-- if/when Expression Section -->
  <g transform="translate(50, 60)">
    <rect x="0" y="0" width="700" height="180" rx="10" fill="#F9F9FF" stroke="#7F52FF" stroke-width="2"/>
    <text x="350" y="25" font-family="Arial, sans-serif" font-size="18" font-weight="bold" text-anchor="middle" fill="#7F52FF">
      Kotlin: 式として使える制御構文
    </text>

    <!-- if expression -->
    <g transform="translate(20, 40)">
      <rect x="0" y="0" width="320" height="60" rx="5" fill="white" stroke="#999" stroke-width="1"/>
      <text x="10" y="20" font-family="monospace" font-size="12" fill="#333">
        // if式が値を返す
      </text>
      <text x="10" y="35" font-family="monospace" font-size="12" fill="#333">
        val max = if (a > b) a else b
      </text>
      <text x="10" y="50" font-family="monospace" font-size="12" fill="#4CAF50">
        // 直接代入可能
      </text>
    </g>

    <!-- when expression -->
    <g transform="translate(360, 40)">
      <rect x="0" y="0" width="320" height="120" rx="5" fill="white" stroke="#999" stroke-width="1"/>
      <text x="10" y="20" font-family="monospace" font-size="12" fill="#333">
        // when式の強力な機能
      </text>
      <text x="10" y="35" font-family="monospace" font-size="12" fill="#333">
        val result = when(x) {
      </text>
      <text x="10" y="50" font-family="monospace" font-size="12" fill="#333">
          in 1..10 -> "範囲チェック"
      </text>
      <text x="10" y="65" font-family="monospace" font-size="12" fill="#333">
          is String -> "型チェック"
      </text>
      <text x="10" y="80" font-family="monospace" font-size="12" fill="#333">
          value?.length == 5 -> "複雑な条件"
      </text>
      <text x="10" y="95" font-family="monospace" font-size="12" fill="#333">
          else -> "デフォルト"
      </text>
      <text x="10" y="110" font-family="monospace" font-size="12" fill="#333">
        }
      </text>
    </g>
  </g>

  <!-- Smart Cast Section -->
  <g transform="translate(50, 260)">
    <rect x="0" y="0" width="340" height="200" rx="10" fill="#FFF0FF" stroke="#C711E1" stroke-width="2"/>
    <text x="170" y="25" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#C711E1">
      Kotlin: スマートキャスト
    </text>

    <rect x="20" y="40" width="300" height="100" rx="5" fill="white" stroke="#999" stroke-width="1"/>
    <text x="30" y="60" font-family="monospace" font-size="12" fill="#333">
      fun process(x: Any) {
    </text>
    <text x="30" y="75" font-family="monospace" font-size="12" fill="#333">
        if (x is String) {
    </text>
    <text x="30" y="90" font-family="monospace" font-size="12" fill="#4CAF50">
          // xは自動的にString型に！
    </text>
    <text x="30" y="105" font-family="monospace" font-size="12" fill="#333">
          println(x.length)
    </text>
    <text x="30" y="120" font-family="monospace" font-size="12" fill="#333">
        }
    </text>
    <text x="30" y="135" font-family="monospace" font-size="12" fill="#333">
      }
    </text>

    <!-- Benefits -->
    <text x="30" y="165" font-family="Arial, sans-serif" font-size="13" font-weight="bold" fill="#333">
      メリット：
    </text>
    <text x="30" y="185" font-family="Arial, sans-serif" font-size="11" fill="#666">
      ✓ 明示的なキャスト不要
    </text>
    <text x="30" y="200" font-family="Arial, sans-serif" font-size="11" fill="#666">
      ✓ 型安全性の保証
    </text>
    <text x="30" y="215" font-family="Arial, sans-serif" font-size="11" fill="#666">
      ✓ コードの簡潔性
    </text>
  </g>

  <!-- Java Traditional Section -->
  <g transform="translate(410, 260)">
    <rect x="0" y="0" width="340" height="200" rx="10" fill="#FFF9F0" stroke="#F89820" stroke-width="2"/>
    <text x="170" y="25" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#F89820">
      Java: 明示的なキャスト
    </text>

    <rect x="20" y="40" width="300" height="100" rx="5" fill="white" stroke="#999" stroke-width="1"/>
    <text x="30" y="60" font-family="monospace" font-size="12" fill="#333">
      void process(Object x) {
    </text>
    <text x="30" y="75" font-family="monospace" font-size="12" fill="#333">
        if (x instanceof String) {
    </text>
    <text x="30" y="90" font-family="monospace" font-size="12" fill="#C62828">
          // 明示的なキャストが必要
    </text>
    <text x="30" y="105" font-family="monospace" font-size="12" fill="#333">
          String s = (String) x;
    </text>
    <text x="30" y="120" font-family="monospace" font-size="12" fill="#333">
          System.out.println(s.length());
    </text>
    <text x="30" y="135" font-family="monospace" font-size="12" fill="#333">
      }
    </text>

    <!-- Challenges -->
    <text x="30" y="165" font-family="Arial, sans-serif" font-size="13" font-weight="bold" fill="#333">
      課題：
    </text>
    <text x="30" y="185" font-family="Arial, sans-serif" font-size="11" fill="#666">
      • 冗長なキャスト記述
    </text>
    <text x="30" y="200" font-family="Arial, sans-serif" font-size="11" fill="#666">
      • キャストミスのリスク
    </text>
    <text x="30" y="215" font-family="Arial, sans-serif" font-size="11" fill="#666">
      • 可読性の低下
    </text>
  </g>
</svg>